components:
  parameters:
    queryMemberId:
      name: 'memberId'
      in: 'query'
      description: 'The id of the user.'
      schema:
        type: 'string'
    queryUserId:
      name: 'userId'
      in: 'query'
      description: 'The id of the user.'
      schema:
        type: 'string'
    queryPage:
      name: 'page'
      in: 'query'
      description: 'The pagination page number.'
      schema:
        type: 'number'
        default: 0
    queryMatchExact:
      name: 'matchExactDate'
      in: 'query'
      description: 'Match `startDate` and `endDate` exactly.'
      schema:
        type: 'boolean'
        default: false
    queryLimit:
      name: 'limit'
      in: 'query'
      description: 'Limit the number of records on each page.'
      schema:
        type: 'number'
        default: 25
        minimum: 25
        maximum: 100
    querySortBy:
      name: 'sortBy'
      in: 'query'
      description: 'Sort by.'
      schema:
        type: 'string'
        default: updatedAt
        enum:
          - updatedAt
    querySortByUser:
      name: 'sortBy'
      in: 'query'
      description: 'Sort by username.'
      schema:
        type: 'string'
        default: username
        enum:
          - username
    querySortByTrip:
      name: 'sortBy'
      in: 'query'
      description: 'Sort by key.'
      schema:
        type: 'string'
        default: 'updatedAt'
        enum:
          - 'updatedAt'
          - 'startDate'
          - 'spotsFilled'
    querySortOrder:
      name: 'sortOrder'
      in: 'query'
      description: 'Sort order applied on `sortBy` fields.'
      schema:
        type: 'number'
        enum:
          - 1
          - -1
        default: -1
    querySearch:
      name: 'search'
      in: 'query'
      description: 'Search filter.'
      schema:
        type: 'string'
    queryMinGroupSize:
      name: 'minGroupSize'
      in: 'query'
      description: 'Search for minGroupSize.'
      schema:
        type: 'number'
    queryMaxGroupSize:
      name: 'maxGroupSize'
      in: 'query'
      description: 'Search for maxGroupSize.'
      schema:
        type: 'number'
    queryMinStartDate:
      name: 'startDate'
      in: 'query'
      description: 'Search for minStartDate. Format: `YYYYMMDD`.'
      schema:
        type: 'number'
        format: 'YYYYMMDD'
    queryMaxEndDate:
      name: 'endDate'
      in: 'query'
      description: 'Search for maxEndDate. Format: `YYYYMMDD`.'
      schema:
        type: 'number'
        format: 'YYYYMMDD'
    queryMinTripLength:
      name: 'minTripLength'
      in: 'query'
      description: 'Search for minTripLength.'
      schema:
        type: 'number'
    queryMaxTripLength:
      name: 'maxTripLength'
      in: 'query'
      description: 'Search for maxTripLength.'
      schema:
        type: 'number'
    queryInterests:
      name: 'interests'
      in: 'query'
      description: 'Search for interests by comma separated value. Ex. value1,value2.'
      schema:
        type: 'string'
    queryDestinations:
      name: 'destinations'
      in: 'query'
      description: 'Search for destinations by comma separated value. Ex. value1,value2.'
      schema:
        type: 'string'
    queryIsMember:
      name: 'isMember'
      in: 'query'
      description: 'List all of the trips belonging to the user.'
      schema:
        type: 'boolean'
    queryIsFavorite:
      name: 'isFavorite'
      in: 'query'
      description: "List all of the user's favorite trips."
      schema:
        type: 'boolean'
    queryIsPublic:
      name: 'isPublic'
      in: 'query'
      description: "List all of the user's public trips."
      schema:
        type: 'boolean'
        default: true
    queryIsArchived:
      name: 'isArchived'
      in: 'query'
      description: "List all the user's archived trips."
      schema:
        type: 'boolean'
        default: false
    queryStatus:
      name: 'status'
      in: 'query'
      description: "List all of the trips with status."
      schema:
        type: 'string'
        enum: ['draft', 'published', 'completed', 'cancelled']
    queryTripId:
      name: 'tripId'
      in: 'query'
      description: 'The trip Id.'
      schema:
        type: 'string'
    queryIsHost:
      name: 'isHost'
      in: 'query'
      description: 'This will list the details per the host permissions, otherwise it will list the details as a normal user.'
      schema:
        type: 'boolean'
        enum: [true, false]
