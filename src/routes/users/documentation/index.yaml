paths:
  /users:
    get:
      description: Returns list of users
      operationId: listUsers
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/querySearch'
        - $ref: '#/components/parameters/querySortByUsername'
        - $ref: '#/components/parameters/querySortOrder'
      responses:
        '200':
          description: User response
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - result
                properties:
                  status:
                    type: string
                    default: 'success'
                  result:
                    type: object
                    required:
                      - totalCount
                      - data
                    properties:
                      totalCount:
                        type: number
                        description: Total number of records
                      nextPageToken:
                        type: string
                        description: Next page token, available if more record exists. On last page it will not come.
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            username:
                              type: string
                            email:
                              type: string
                            firstName:
                              type: string
                            lastName:
                              type: string
                            avatarUrl:
                              type: string
                            isActive:
                              type: boolean
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonErrorFormat'
    post:
      description: Creates a user
      operationId: createUser
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/createUser'
      responses:
        '200':
          description: Create User response
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - result
                properties:
                  status:
                    type: string
                    default: 'success'
                  result:
                    type: string
                    default: User id
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonErrorFormat'
  /users/check-user-exists:
    post:
      description: Check username exists
      operationId: checkExists
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/checkUserExists'
      responses:
        '200':
          description: User status
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                  result:
                    type: object
                    properties:
                      userExists:
                        type: boolean
                        description: User exists
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonErrorFormat'

  /users/{userId}:
    get:
      description: Returns a user based on a user ID
      operationId: findUserById
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/pathUserId'
      responses:
        '200':
          description: User response
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - result
                properties:
                  status:
                    type: string
                    default: 'success'
                  result:
                    $ref: '#/components/schemas/UserModel'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonErrorFormat'
    put:
      description: Updates a single user based on the ID supplied and data
      operationId: updateUser
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/pathUserId'
        - $ref: '#/components/parameters/updateUser'

      responses:
        '204':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessFormat'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonErrorFormat'
    delete:
      description: Deletes a single user based on the ID supplied
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/pathUserId'
      responses:
        '204':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessFormat'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonErrorFormat'
